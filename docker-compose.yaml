name: lightrag

services:
  # Caddy Reverse Proxy with Docker Provider
  proxy:
    # ref1: https://hub.docker.com/_/caddy
    # ref2: https://hub.docker.com/r/lucaslorentz/caddy-docker-proxy, https://github.com/lucaslorentz/caddy-docker-proxy
    image: lucaslorentz/caddy-docker-proxy:latest
    container_name: proxy
    restart: unless-stopped
    ports:
      - 80:80
      - 443:443/tcp
      - 443:443/udp
    env_file:
      - .env.caddy
    volumes:
      # access to docker socket for capturing services config
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - caddy_data:/data
      - caddy_config:/config
      - ./docker/certificates:/certificates:ro
    networks:
      - frontend
      - backend
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # LazyDocker Web UI - Docker Fleet Management
  monitor:
    # ref1: https://hub.docker.com/r/mosswill/isaiah
    # ref2: https://github.com/will-moss/isaiah
    image: ghcr.io/will-moss/isaiah:latest
    container_name: monitor
    restart: unless-stopped
    env_file:
      - .env
      - .env.monitoring
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - frontend
      - backend
    labels:
      # Caddy labels for Isaiah web interface
      caddy: "https://monitor.dev.localhost"
      caddy.reverse_proxy: "{{upstreams 3000}}"
      caddy.basic_auth: "*"
      caddy.basic_auth.admin: "${MONITOR_BASIC_AUTH_HASH}"
      caddy.tls: "/certificates/dev.localhost.pem /certificates/dev.localhost-key.pem"
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'
        reservations:
          memory: 128M
          cpus: '0.1'
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

networks:
  frontend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/24
          gateway: 172.20.0.1
  backend:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.21.0.0/24
          gateway: 172.21.0.1

volumes:
  # Caddy
  caddy_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      # Caddy will automatically create sub-folder 
      device: ./docker/data
  caddy_config:
    driver: local
    driver_opts:
      type: none
      o: bind
      # Caddy will automatically create sub-folder 
      device: ./docker/etc
